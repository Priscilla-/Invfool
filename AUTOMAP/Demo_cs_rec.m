% This file computes ``state of the`` art image reconstructions, for the 
% noisy images created by the Demo_adversarial_noise_multi.py 
% and Demo_create_adversarial_images.py scripts.
% Make sure to update the runner_id and location paths

location_of_folder = '/home/va304/invfool/AUTOMAP';
src_data = '/local/scratch/public/va304/storage/AUTOMAP';
src_k_mask ='/local/scratch/public/va304/storage/AUTOMAP';
plot_fldr = 'plots_con';

% Create destination for the plots
if (exist(plot_fldr) ~= 7) 
    mkdir(plot_fldr);
end

runner_id = 52;
load(fullfile(src_data, sprintf('runner_%d_data.mat', runner_id))); % mri_data, rr
load(fullfile(src_k_mask, 'k_mask.mat')); % k_mask; 9855 samples
mask = logical(k_mask);

for im_nbr = [4,5,6]
    im = double(squeeze(mri_data(im_nbr, :,:)));
    r0 = double(squeeze(rr(1, im_nbr, :,:)));
    r1 = double(squeeze(rr(2, im_nbr, :,:)));
    r2 = double(squeeze(rr(3, im_nbr, :,:)));
    r3 = double(squeeze(rr(4, im_nbr, :,:)));
    r4 = double(squeeze(rr(5, im_nbr, :,:)));
    
    N = 128;
    
    % fetch Operators
    A = getFourierOperator([N,N], mask);
    % D = getWaveletOperator(m,2,3);
    D = getShearletOperator([N,N], [1 1 2]);
        
    % fetch measurement operator
    y0       = A.times(im(:) + r0(:));
    y1       = A.times(im(:) + r1(:));
    y2       = A.times(im(:) + r2(:));
    y3       = A.times(im(:) + r3(:));
    y4       = A.times(im(:) + r4(:));
    
    % set parameters
    beta        = 1e5;
    alpha       = [1 1];
    mu          = [5e3, 1e1, 2e1];
    epsilon     = 1e-5;
    
    maxIter     = 50;
    adaptive    = 'NewIRL1';
    correct     = @(x) real(x);
    doTrack     = true;
    doPlot      = false;
    
    %% solve
    
    out0 = TGVsolver(y0, [N,N], A, D, alpha, beta, mu, ...
                    'maxIter',  maxIter, ...
                    'adaptive', adaptive, ...
                    'f',        im+r0, ...
                    'correct',  correct, ...
                    'epsilon',  epsilon, ...
                    'doTrack',  doTrack, ...
                    'doPlot',   doPlot);
    
    out1 = TGVsolver(y1, [N,N], A, D, alpha, beta, mu, ...
                    'maxIter',  maxIter, ...
                    'adaptive', adaptive, ...
                    'f',        im+r1, ...
                    'correct',  correct, ...
                    'epsilon',  epsilon, ...
                    'doTrack',  doTrack, ...
                    'doPlot',   doPlot);
    
    out2 = TGVsolver(y2, [N,N], A, D, alpha, beta, mu, ...
                    'maxIter',  maxIter, ...
                    'adaptive', adaptive, ...
                    'f',        im+r2, ...
                    'correct',  correct, ...
                    'epsilon',  epsilon, ...
                    'doTrack',  doTrack, ...
                    'doPlot',   doPlot);
    
    out3 = TGVsolver(y3, [N,N], A, D, alpha, beta, mu, ...
                    'maxIter',  maxIter, ...
                    'adaptive', adaptive, ...
                    'f',        im+r3, ...
                    'correct',  correct, ...
                    'epsilon',  epsilon, ...
                    'doTrack',  doTrack, ...
                    'doPlot',   doPlot);
    
    out4 = TGVsolver(y4, [N,N], A, D, alpha, beta, mu, ...
                    'maxIter',  maxIter, ...
                    'adaptive', adaptive, ...
                    'f',        im+r4, ...
                    'correct',  correct, ...
                    'epsilon',  epsilon, ...
                    'doTrack',  doTrack, ...
                    'doPlot',   doPlot);
    
    
    
    imwrite(abs(out0.rec), fullfile(plot_fldr, ...
                           sprintf('rec_shearlet_run_%d_int_%d_idx_0.png',...
                           runner_id, im_nbr-1)));
    imwrite(abs(out1.rec), fullfile(plot_fldr, ...
                           sprintf('rec_shearlet_run_%d_int_%d_idx_1.png',...
                           runner_id, im_nbr-1)));
    imwrite(abs(out2.rec), fullfile(plot_fldr, ...
                           sprintf('rec_shearlet_run_%d_int_%d_idx_2.png',...
                           runner_id, im_nbr-1)));
    imwrite(abs(out3.rec), fullfile(plot_fldr, ...
                           sprintf('rec_shearlet_run_%d_int_%d_idx_3.png',...
                           runner_id, im_nbr-1)));
    imwrite(abs(out4.rec), fullfile(plot_fldr, ...
                           sprintf('rec_shearlet_run_%d_int_%d_idx_4.png',...
                           runner_id, im_nbr-1)));

end



